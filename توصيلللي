https://github.com/OddayFw/Delivery-

# Import the required modules

import os

import sys

import time

from flask import Flask, request, render_template, jsonify

from flask_sqlalchemy import SQLAlchemy

from flask_migrate import Migrate

from flask_wtf import FlaskForm

from wtforms import StringField, SubmitField

from wtforms.validators import DataRequired

import plotly.express as px

import pandas as pd

import requests

import stripe

import paypalrestsdk

from flask_restful import Resource, Api, reqparse

from flask_login import (UserMixin, login_user, LoginManager, current_user, logout_user, login_required)

from flask_principal import (Identity, AnonymousIdentity, identity_changed, RoleNeed, UserNeed, Permission)



# Import the Flask-Login and Flask-Principal modules

from flask_login import (UserMixin, login_user, LoginManager, current_user, logout_user, login_required)

from flask_principal import (Identity, AnonymousIdentity, identity_changed, RoleNeed, UserNeed, Permission)



# Create the instances of LoginManager and Principal and initialize them with your app

login_manager = LoginManager()

login_manager.session_protection = "strong"

login_manager.login_view = "login"

login_manager.login_message_category = "info"



principal = Principal()



def create_app():

    app = Flask(__name__)

    app.secret_key = 'secret-key'

    app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///database.db"

    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True

    login_manager.init_app(app)

    principal.init_app(app)

    db.init_app(app)

    migrate.init_app(app, db)

    bcrypt.init_app(app)

    return app



# Define the database models using flask_sqlalchemy and flask_login



class Order(db.Model):

    id = db.Column(db.Integer, primary_key=True)

    customer_id = db.Column(db.Integer, db.ForeignKey('customer.id'))

    delivery_driver_id = db.Column(db.Integer, db.ForeignKey('delivery_driver.id'))

    status = db.Column(db.String(10))

    created_at = db.Column(db.DateTime, default=time.now)

    shipping_cost = db.Column(db.Float)

    payment_method = db.Column(db.String(20))

    payment_id = db.Column(db.String(100))



class Customer(db.Model, UserMixin):

    id = db.Column(db.Integer, primary_key=True)

    name = db.Column(db.String(100))

    address = db.Column(db.String(100))

    phone_number = db.Column(db.String(10))

    password_hash = db.Column(db.String(128)) # Add a column for storing the hashed password

    orders = db.relationship('Order', backref='customer', lazy=True)



class DeliveryDriver(db.Model):

    id = db.Column(db.Integer, primary_key=True)

    name = db.Column(db.String(100))

    car_license_plate= db.Column(db.String(10))

    orders = db.relationship('Order', backref='delivery_driver', lazy=True)



class Role(db.Model): # Add a new model for storing the roles of the users

    id = db.Column(db.Integer(), primary_key=True)

    name = db.Column(db.String(50), unique=True)



class UserRoles(db.Model): # Add a new model for storing the association between users and roles

    id = db.Column(db.Integer(), primary_key=True)

    user_id = db.Column(db.Integer(), db.ForeignKey('customer.id', ondelete='CASCADE'))

    role_id = db.Column(db.Integer(), db.ForeignKey('role.id', ondelete='CASCADE'))



# Define the forms using flask_wtf



class OrderForm(FlaskForm):

    customer_id = StringField('Customer ID', validators=[DataRequired()])

    delivery_driver_id= StringField('Delivery Driver ID', validators=[DataRequired()])

    status = StringField('Status', validators=[DataRequired()])

    payment_method= StringField('Payment Method', validators=[DataRequired()])

    submit= SubmitField('Create Order')



class LoginForm(FlaskForm): # Add a new form for logging in the users

    name = StringField('Name', validators=[DataRequired()])

    password= StringField('Password', validators=[DataRequired()]) # Add a field for entering the password

    submit= SubmitField('Log In')



class RegisterForm(FlaskForm): # Add a new form for registering the users

    name= StringField('Name', validators=[DataRequired()])

    address= StringField('Address', validators=[DataRequired()])

    phone_number= StringField('Phone Number', validators=[DataRequired()])

    password= StringField('Password', validators=[DataRequired()]) # Add a field for entering the password

    role= StringField('Role', validators=[DataRequired()]) # Add a field for entering the role

    submit= SubmitField('Register')



# Define the API resources using flask_restful



class OrderListResource(Resource):

    def get(self):

        # Return a list of all orders as JSON

        orders = Order.query.all()

        return jsonify({'orders': [order.dict for order in orders]})



class OrderResource(Resource):

    def get(self, order_id):

        # Return a single order by id as JSON

        order = Order.query.get_or_404(order_id)

        return jsonify(order.dict)



api = Api(app)

api.add_resource(OrderListResource, '/api/orders')

api.add_resource(OrderResource, '/api/orders/<int:order_id>')



# Define the routes using Flask



@app.route('/order', methods=['GET', 'POST'])

@login_required # Require the user to be logged in using flask_login

def order():

    form = OrderForm() # Create an instance of the order form

    if form.validate_on_submit(): # Check if the form is valid on submission

        # Get the form data from the request object

        customer_id = form.customer_id.data 

        delivery_driver_id= form.delivery_driver_id.data 

        status = form.status.data 

        payment_method= form.payment_method.data 



        # Create a new order object with the form data

        order = Order(customer_id=customer_id,

                      delivery_driver_id=delivery_driver_id,

                      status=status,

                      payment_method=payment_method)



        # Calculate the shipping cost using a third-party service

        customer = Customer.query.get(customer_id)

        driver = DeliveryDriver.query.get(delivery_driver_id)

        shipping_cost= calculate_shipping_cost(customer.address, driver.car_license_plate)

        order.shipping_cost= shipping_cost



        # Process the payment using Stripe or Paypal depending on the payment method

        if payment_method == 'Stripe':

            token = request.form['stripeToken']

            charge = stripe.Charge.create(

                amount=int(shipping_cost * 100),

                currency='usd',

                description=f'Order {order.id}',

                source=token,

            )

            order.payment_id= charge.id

            payment_result= charge.status

        elif payment_method == 'Paypal':

            payment = paypalrestsdk.Payment({

                "intent": "sale",

                "payer": {

                    "payment_method": "paypal"

                },

                "redirect_urls": {

                    "return_url": f"http://localhost:5000/execute/{order.id}",

                    "cancel_url": f"http://localhost:5000/cancel/{order.id}"

                },

                "transactions": [{

                    "item_list": {

                        "items": [{

                            "name": f"Order {order.id}",

                            "sku": f"order-{order.id}",

                            "price": str(shipping_cost),

                            "currency": "USD",

                            "quantity": 1

                        }]

                    },

                    "amount": {

                        "total": str(shipping_cost),

                        "currency": "USD"

                    },

                    "description": f"Order {order.id}"

                }]

            })

            if payment.create():

                order.payment_id= payment.id

                for link in payment.links:

                    if link.rel == 'approval_url':

                        # Redirect the user to link.href

                        return redirect(link.href)

            else:

                return 'Payment failed!'



        if payment_result == 'succeeded':

            db.session.add(order) # Add the order to the database session

            db.session.commit() # Commit the changes to the database



            # Send a notification to the customer and the driver using a third-party service

            message = f'Your order {order.id} has been created with status {status}, shipping cost {shipping_cost} and payment method {payment_method}.'

            send_notification(customer.phone_number,message)

            send_notification(driver.phone_number,message)



            return 'Order created!'

        else:

            return 'Payment failed!'

    return render_template('order.html', form=form) # Render the order form template



@app.route('/')

def index():

    return render_template('index.html') # Render the index template



@app.route('/chart')

@login_required # Require the user to be logged in using flask_login

def chart():

    orders = Order.query.all() # Get all orders from the database

    df = pd.DataFrame([order.dict for order in orders]) # Convert them to a pandas dataframe

    fig = px.pie(df, names='status', title='Orders by Status') # Create a pie chart using plotly.express

    return fig.to_html() # Return the chart as HTML



@app.route('/execute/<order_id>')

def execute(order_id):

    order = Order.query.get(order_id) # Get the order by id from the database

    payment = paypalrestsdk.Payment.find(order.payment_id) #

Copy


